// Code generated by pigeon; DO NOT EDIT.

// This file is generated automatically from grammar.peg.
// Do not modify.

package grammar

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

type Protocol string

type Comment struct {
	Text string `json:"text"`
}

type ExcludeDirective struct {
	Ranges []*PortRange `json:"ranges"`
}

type PortRange struct {
	Start int `json:"start"`
	End   int `json:"end"`
}

func (pr *PortRange) IsIncluded(t Protocol, p int) bool {
	return p >= pr.Start && p <= pr.End
}

type ProbeDirective struct {
	Protocol    string `json:"protocol"`
	ProbeName   string `json:"name"`
	ProbeString string `json:"payload"`
	NoPayload   bool   `json:"noPayload"`
}

type MatchDirective struct {
	Service Service       `json:"service"`
	Pattern MatchPattern  `json:"pattern"`
	Version []VersionInfo `json:"version_info,omitempty"`
}

type VersionInfo struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type SoftMatchDirective struct {
	Service Service       `json:"service"`
	Pattern MatchPattern  `json:"pattern"`
	Version []VersionInfo `json:"version_info,omitempty"`
}

type MatchPattern struct {
	Expression string `json:"expression"`
	Options    string `json:"options,omitempty"`
}

type Service struct {
	Name   string `json:"name"`
	UseSSL bool   `json:"use_ssl"`
}

type PortsDirective struct {
	Ranges []*PortRange `json:"ranges"`
	SSL    bool         `json:"ssl"`
}

type TotalWaitMsDirective struct {
	Ms int `json:"ms"`
}

type TcpWrappedMsDirective struct {
	Ms int `json:"ms"`
}

type RarityDirective struct {
	Number int `json:"number"`
}

type FallbackDirective struct {
	services []string `json:"services"`
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Lines",
			pos:  position{line: 86, col: 1, offset: 1911},
			expr: &actionExpr{
				pos: position{line: 86, col: 10, offset: 1920},
				run: (*parser).callonLines1,
				expr: &seqExpr{
					pos: position{line: 86, col: 10, offset: 1920},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 86, col: 10, offset: 1920},
							label: "line",
							expr: &zeroOrMoreExpr{
								pos: position{line: 86, col: 15, offset: 1925},
								expr: &ruleRefExpr{
									pos:  position{line: 86, col: 16, offset: 1926},
									name: "Line",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 86, col: 23, offset: 1933},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Line",
			pos:  position{line: 88, col: 1, offset: 1959},
			expr: &actionExpr{
				pos: position{line: 88, col: 9, offset: 1967},
				run: (*parser).callonLine1,
				expr: &seqExpr{
					pos: position{line: 88, col: 9, offset: 1967},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 88, col: 9, offset: 1967},
							label: "stmt",
							expr: &choiceExpr{
								pos: position{line: 88, col: 15, offset: 1973},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 88, col: 15, offset: 1973},
										name: "Comment",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 25, offset: 1983},
										name: "Directive",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 36, offset: 1994},
							name: "newline",
						},
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 92, col: 1, offset: 2028},
			expr: &actionExpr{
				pos: position{line: 92, col: 12, offset: 2039},
				run: (*parser).callonComment1,
				expr: &seqExpr{
					pos: position{line: 92, col: 12, offset: 2039},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 92, col: 12, offset: 2039},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 16, offset: 2043},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 18, offset: 2045},
							label: "comment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 92, col: 26, offset: 2053},
								expr: &charClassMatcher{
									pos:        position{line: 92, col: 27, offset: 2054},
									val:        "[^\\n]",
									chars:      []rune{'\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Directive",
			pos:  position{line: 96, col: 1, offset: 2108},
			expr: &choiceExpr{
				pos: position{line: 96, col: 14, offset: 2121},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 96, col: 14, offset: 2121},
						name: "ExcludeDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 15, offset: 2152},
						name: "ProbeDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 15, offset: 2181},
						name: "MatchDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 15, offset: 2210},
						name: "SoftMatchDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 15, offset: 2243},
						name: "PortsDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 101, col: 15, offset: 2272},
						name: "SSLPortsDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 15, offset: 2304},
						name: "TotalWaitMsDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 15, offset: 2339},
						name: "TcpWrappedMsDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 104, col: 15, offset: 2375},
						name: "RarityDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 105, col: 15, offset: 2405},
						name: "FallbackDirective",
					},
					&ruleRefExpr{
						pos:  position{line: 106, col: 15, offset: 2437},
						name: "_",
					},
				},
			},
		},
		{
			name: "ExcludeDirective",
			pos:  position{line: 108, col: 1, offset: 2440},
			expr: &actionExpr{
				pos: position{line: 108, col: 21, offset: 2460},
				run: (*parser).callonExcludeDirective1,
				expr: &seqExpr{
					pos: position{line: 108, col: 21, offset: 2460},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 108, col: 21, offset: 2460},
							val:        "Exclude",
							ignoreCase: false,
							want:       "\"Exclude\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 31, offset: 2470},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 108, col: 33, offset: 2472},
							label: "prl",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 37, offset: 2476},
								name: "PortRangeList",
							},
						},
					},
				},
			},
		},
		{
			name: "PortRangeList",
			pos:  position{line: 112, col: 1, offset: 2549},
			expr: &actionExpr{
				pos: position{line: 112, col: 18, offset: 2566},
				run: (*parser).callonPortRangeList1,
				expr: &seqExpr{
					pos: position{line: 112, col: 18, offset: 2566},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 112, col: 18, offset: 2566},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 24, offset: 2572},
								name: "PortRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 34, offset: 2582},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 112, col: 41, offset: 2589},
								expr: &seqExpr{
									pos: position{line: 112, col: 42, offset: 2590},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 112, col: 42, offset: 2590},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 112, col: 46, offset: 2594},
											name: "PortRange",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PortRange",
			pos:  position{line: 127, col: 1, offset: 2971},
			expr: &actionExpr{
				pos: position{line: 127, col: 14, offset: 2984},
				run: (*parser).callonPortRange1,
				expr: &seqExpr{
					pos: position{line: 127, col: 14, offset: 2984},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 127, col: 14, offset: 2984},
							expr: &seqExpr{
								pos: position{line: 127, col: 15, offset: 2985},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 127, col: 15, offset: 2985},
										val:        "[TU]",
										chars:      []rune{'T', 'U'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 127, col: 20, offset: 2990},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 26, offset: 2996},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 32, offset: 3002},
								name: "number",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 40, offset: 3010},
							label: "end",
							expr: &zeroOrOneExpr{
								pos: position{line: 127, col: 44, offset: 3014},
								expr: &seqExpr{
									pos: position{line: 127, col: 45, offset: 3015},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 127, col: 45, offset: 3015},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&ruleRefExpr{
											pos:  position{line: 127, col: 49, offset: 3019},
											name: "number",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ProbeDirective",
			pos:  position{line: 136, col: 1, offset: 3216},
			expr: &actionExpr{
				pos: position{line: 136, col: 19, offset: 3234},
				run: (*parser).callonProbeDirective1,
				expr: &seqExpr{
					pos: position{line: 136, col: 19, offset: 3234},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 136, col: 19, offset: 3234},
							val:        "Probe",
							ignoreCase: false,
							want:       "\"Probe\"",
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 27, offset: 3242},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 29, offset: 3244},
							label: "protocol",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 38, offset: 3253},
								name: "Protocol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 47, offset: 3262},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 49, offset: 3264},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 54, offset: 3269},
								name: "Slug",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 59, offset: 3274},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 136, col: 61, offset: 3276},
							val:        "q|",
							ignoreCase: false,
							want:       "\"q|\"",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 66, offset: 3281},
							label: "payload",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 74, offset: 3289},
								name: "ProbeString",
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 86, offset: 3301},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 90, offset: 3305},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 92, offset: 3307},
							label: "noPayload",
							expr: &zeroOrOneExpr{
								pos: position{line: 136, col: 102, offset: 3317},
								expr: &litMatcher{
									pos:        position{line: 136, col: 103, offset: 3318},
									val:        "no-payload",
									ignoreCase: false,
									want:       "\"no-payload\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Protocol",
			pos:  position{line: 140, col: 1, offset: 3440},
			expr: &actionExpr{
				pos: position{line: 140, col: 13, offset: 3452},
				run: (*parser).callonProtocol1,
				expr: &choiceExpr{
					pos: position{line: 140, col: 14, offset: 3453},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 140, col: 14, offset: 3453},
							val:        "TCP",
							ignoreCase: false,
							want:       "\"TCP\"",
						},
						&litMatcher{
							pos:        position{line: 140, col: 22, offset: 3461},
							val:        "UDP",
							ignoreCase: false,
							want:       "\"UDP\"",
						},
					},
				},
			},
		},
		{
			name: "MatchDirective",
			pos:  position{line: 142, col: 1, offset: 3500},
			expr: &actionExpr{
				pos: position{line: 142, col: 19, offset: 3518},
				run: (*parser).callonMatchDirective1,
				expr: &seqExpr{
					pos: position{line: 142, col: 19, offset: 3518},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 142, col: 19, offset: 3518},
							val:        "match",
							ignoreCase: false,
							want:       "\"match\"",
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 27, offset: 3526},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 142, col: 29, offset: 3528},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 34, offset: 3533},
								name: "Service",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 42, offset: 3541},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 142, col: 44, offset: 3543},
							label: "match",
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 50, offset: 3549},
								name: "MatchPattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 63, offset: 3562},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 142, col: 65, offset: 3564},
							label: "vi",
							expr: &zeroOrOneExpr{
								pos: position{line: 142, col: 68, offset: 3567},
								expr: &ruleRefExpr{
									pos:  position{line: 142, col: 68, offset: 3567},
									name: "VersionInfo",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VersionInfo",
			pos:  position{line: 149, col: 1, offset: 3779},
			expr: &actionExpr{
				pos: position{line: 149, col: 16, offset: 3794},
				run: (*parser).callonVersionInfo1,
				expr: &seqExpr{
					pos: position{line: 149, col: 16, offset: 3794},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 149, col: 16, offset: 3794},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 149, col: 22, offset: 3800},
								name: "VersionInfoItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 149, col: 38, offset: 3816},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 149, col: 45, offset: 3823},
								expr: &seqExpr{
									pos: position{line: 149, col: 46, offset: 3824},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 149, col: 46, offset: 3824},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 149, col: 48, offset: 3826},
											name: "VersionInfoItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SoftMatchDirective",
			pos:  position{line: 164, col: 1, offset: 4232},
			expr: &actionExpr{
				pos: position{line: 164, col: 23, offset: 4254},
				run: (*parser).callonSoftMatchDirective1,
				expr: &seqExpr{
					pos: position{line: 164, col: 23, offset: 4254},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 164, col: 23, offset: 4254},
							val:        "softmatch",
							ignoreCase: false,
							want:       "\"softmatch\"",
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 35, offset: 4266},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 37, offset: 4268},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 42, offset: 4273},
								name: "Service",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 50, offset: 4281},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 52, offset: 4283},
							label: "match",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 58, offset: 4289},
								name: "MatchPattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 71, offset: 4302},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 73, offset: 4304},
							label: "vi",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 76, offset: 4307},
								expr: &ruleRefExpr{
									pos:  position{line: 164, col: 76, offset: 4307},
									name: "VersionInfo",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PortsDirective",
			pos:  position{line: 171, col: 1, offset: 4527},
			expr: &actionExpr{
				pos: position{line: 171, col: 19, offset: 4545},
				run: (*parser).callonPortsDirective1,
				expr: &seqExpr{
					pos: position{line: 171, col: 19, offset: 4545},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 171, col: 19, offset: 4545},
							val:        "ports",
							ignoreCase: false,
							want:       "\"ports\"",
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 27, offset: 4553},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 29, offset: 4555},
							label: "prl",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 33, offset: 4559},
								name: "PortRangeList",
							},
						},
					},
				},
			},
		},
		{
			name: "SSLPortsDirective",
			pos:  position{line: 175, col: 1, offset: 4637},
			expr: &actionExpr{
				pos: position{line: 175, col: 22, offset: 4658},
				run: (*parser).callonSSLPortsDirective1,
				expr: &seqExpr{
					pos: position{line: 175, col: 22, offset: 4658},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 175, col: 22, offset: 4658},
							val:        "sslports",
							ignoreCase: false,
							want:       "\"sslports\"",
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 33, offset: 4669},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 35, offset: 4671},
							label: "prl",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 39, offset: 4675},
								name: "PortRangeList",
							},
						},
					},
				},
			},
		},
		{
			name: "TotalWaitMsDirective",
			pos:  position{line: 179, col: 1, offset: 4752},
			expr: &actionExpr{
				pos: position{line: 179, col: 25, offset: 4776},
				run: (*parser).callonTotalWaitMsDirective1,
				expr: &seqExpr{
					pos: position{line: 179, col: 25, offset: 4776},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 179, col: 25, offset: 4776},
							val:        "totalwaitms",
							ignoreCase: false,
							want:       "\"totalwaitms\"",
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 39, offset: 4790},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 179, col: 41, offset: 4792},
							label: "ms",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 44, offset: 4795},
								name: "number",
							},
						},
					},
				},
			},
		},
		{
			name: "TcpWrappedMsDirective",
			pos:  position{line: 187, col: 1, offset: 4972},
			expr: &actionExpr{
				pos: position{line: 187, col: 26, offset: 4997},
				run: (*parser).callonTcpWrappedMsDirective1,
				expr: &seqExpr{
					pos: position{line: 187, col: 26, offset: 4997},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 187, col: 26, offset: 4997},
							val:        "tcpwrappedms",
							ignoreCase: false,
							want:       "\"tcpwrappedms\"",
						},
						&ruleRefExpr{
							pos:  position{line: 187, col: 41, offset: 5012},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 187, col: 43, offset: 5014},
							label: "ms",
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 46, offset: 5017},
								name: "number",
							},
						},
					},
				},
			},
		},
		{
			name: "RarityDirective",
			pos:  position{line: 195, col: 1, offset: 5196},
			expr: &actionExpr{
				pos: position{line: 195, col: 20, offset: 5215},
				run: (*parser).callonRarityDirective1,
				expr: &seqExpr{
					pos: position{line: 195, col: 20, offset: 5215},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 195, col: 20, offset: 5215},
							val:        "rarity",
							ignoreCase: false,
							want:       "\"rarity\"",
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 29, offset: 5224},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 31, offset: 5226},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 38, offset: 5233},
								name: "number",
							},
						},
					},
				},
			},
		},
		{
			name: "FallbackDirective",
			pos:  position{line: 205, col: 1, offset: 5420},
			expr: &actionExpr{
				pos: position{line: 205, col: 22, offset: 5441},
				run: (*parser).callonFallbackDirective1,
				expr: &seqExpr{
					pos: position{line: 205, col: 22, offset: 5441},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 205, col: 22, offset: 5441},
							val:        "fallback",
							ignoreCase: false,
							want:       "\"fallback\"",
						},
						&ruleRefExpr{
							pos:  position{line: 205, col: 33, offset: 5452},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 35, offset: 5454},
							label: "services",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 44, offset: 5463},
								name: "ServiceList",
							},
						},
					},
				},
			},
		},
		{
			name: "MatchOptions",
			pos:  position{line: 209, col: 1, offset: 5536},
			expr: &actionExpr{
				pos: position{line: 209, col: 17, offset: 5552},
				run: (*parser).callonMatchOptions1,
				expr: &oneOrMoreExpr{
					pos: position{line: 209, col: 17, offset: 5552},
					expr: &charClassMatcher{
						pos:        position{line: 209, col: 17, offset: 5552},
						val:        "[is]",
						chars:      []rune{'i', 's'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Service",
			pos:  position{line: 211, col: 1, offset: 5590},
			expr: &actionExpr{
				pos: position{line: 211, col: 12, offset: 5601},
				run: (*parser).callonService1,
				expr: &seqExpr{
					pos: position{line: 211, col: 12, offset: 5601},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 211, col: 12, offset: 5601},
							label: "prefixed",
							expr: &zeroOrOneExpr{
								pos: position{line: 211, col: 21, offset: 5610},
								expr: &litMatcher{
									pos:        position{line: 211, col: 22, offset: 5611},
									val:        "ssl/",
									ignoreCase: false,
									want:       "\"ssl/\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 211, col: 31, offset: 5620},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 36, offset: 5625},
								name: "Slug",
							},
						},
					},
				},
			},
		},
		{
			name: "ServiceList",
			pos:  position{line: 213, col: 1, offset: 5687},
			expr: &actionExpr{
				pos: position{line: 213, col: 16, offset: 5702},
				run: (*parser).callonServiceList1,
				expr: &seqExpr{
					pos: position{line: 213, col: 16, offset: 5702},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 213, col: 16, offset: 5702},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 21, offset: 5707},
								name: "Slug",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 26, offset: 5712},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 213, col: 33, offset: 5719},
								expr: &seqExpr{
									pos: position{line: 213, col: 34, offset: 5720},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 213, col: 34, offset: 5720},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 213, col: 38, offset: 5724},
											name: "Slug",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ProbeString",
			pos:  position{line: 229, col: 1, offset: 6067},
			expr: &actionExpr{
				pos: position{line: 229, col: 16, offset: 6082},
				run: (*parser).callonProbeString1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 229, col: 16, offset: 6082},
					expr: &charClassMatcher{
						pos:        position{line: 229, col: 16, offset: 6082},
						val:        "[^|]",
						chars:      []rune{'|'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "VersionInfoItem",
			pos:  position{line: 231, col: 1, offset: 6120},
			expr: &choiceExpr{
				pos: position{line: 232, col: 5, offset: 6144},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 232, col: 5, offset: 6144},
						run: (*parser).callonVersionInfoItem2,
						expr: &seqExpr{
							pos: position{line: 232, col: 5, offset: 6144},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 232, col: 5, offset: 6144},
									label: "t",
									expr: &charClassMatcher{
										pos:        position{line: 232, col: 8, offset: 6147},
										val:        "[pvihod]",
										chars:      []rune{'p', 'v', 'i', 'h', 'o', 'd'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 232, col: 18, offset: 6157},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
								&labeledExpr{
									pos:   position{line: 232, col: 22, offset: 6161},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 232, col: 28, offset: 6167},
										name: "noSlash",
									},
								},
								&litMatcher{
									pos:        position{line: 232, col: 36, offset: 6175},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 233, col: 7, offset: 6233},
						run: (*parser).callonVersionInfoItem10,
						expr: &seqExpr{
							pos: position{line: 233, col: 7, offset: 6233},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 233, col: 7, offset: 6233},
									label: "t",
									expr: &charClassMatcher{
										pos:        position{line: 233, col: 10, offset: 6236},
										val:        "[pvihod]",
										chars:      []rune{'p', 'v', 'i', 'h', 'o', 'd'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 233, col: 20, offset: 6246},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&labeledExpr{
									pos:   position{line: 233, col: 24, offset: 6250},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 233, col: 30, offset: 6256},
										name: "noPipe",
									},
								},
								&litMatcher{
									pos:        position{line: 233, col: 37, offset: 6263},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 234, col: 7, offset: 6321},
						run: (*parser).callonVersionInfoItem18,
						expr: &seqExpr{
							pos: position{line: 234, col: 7, offset: 6321},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 234, col: 7, offset: 6321},
									val:        "cpe:/",
									ignoreCase: false,
									want:       "\"cpe:/\"",
								},
								&labeledExpr{
									pos:   position{line: 234, col: 15, offset: 6329},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 234, col: 21, offset: 6335},
										name: "noSlash",
									},
								},
								&litMatcher{
									pos:        position{line: 234, col: 29, offset: 6343},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 234, col: 33, offset: 6347},
									expr: &litMatcher{
										pos:        position{line: 234, col: 34, offset: 6348},
										val:        "a",
										ignoreCase: false,
										want:       "\"a\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 235, col: 7, offset: 6411},
						run: (*parser).callonVersionInfoItem26,
						expr: &seqExpr{
							pos: position{line: 235, col: 7, offset: 6411},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 235, col: 7, offset: 6411},
									val:        "cpe:|",
									ignoreCase: false,
									want:       "\"cpe:|\"",
								},
								&labeledExpr{
									pos:   position{line: 235, col: 15, offset: 6419},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 235, col: 21, offset: 6425},
										name: "noPipe",
									},
								},
								&litMatcher{
									pos:        position{line: 235, col: 28, offset: 6432},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 235, col: 32, offset: 6436},
									expr: &litMatcher{
										pos:        position{line: 235, col: 33, offset: 6437},
										val:        "a",
										ignoreCase: false,
										want:       "\"a\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MatchPattern",
			pos:  position{line: 237, col: 1, offset: 6495},
			expr: &choiceExpr{
				pos: position{line: 238, col: 5, offset: 6516},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 238, col: 5, offset: 6516},
						run: (*parser).callonMatchPattern2,
						expr: &seqExpr{
							pos: position{line: 238, col: 5, offset: 6516},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 238, col: 5, offset: 6516},
									val:        "m/",
									ignoreCase: false,
									want:       "\"m/\"",
								},
								&labeledExpr{
									pos:   position{line: 238, col: 10, offset: 6521},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 238, col: 15, offset: 6526},
										name: "noSlash",
									},
								},
								&litMatcher{
									pos:        position{line: 238, col: 23, offset: 6534},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
								&labeledExpr{
									pos:   position{line: 238, col: 27, offset: 6538},
									label: "opts",
									expr: &zeroOrOneExpr{
										pos: position{line: 238, col: 32, offset: 6543},
										expr: &ruleRefExpr{
											pos:  position{line: 238, col: 32, offset: 6543},
											name: "matchOptions",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 244, col: 7, offset: 6728},
						run: (*parser).callonMatchPattern11,
						expr: &seqExpr{
							pos: position{line: 244, col: 7, offset: 6728},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 244, col: 7, offset: 6728},
									val:        "m|",
									ignoreCase: false,
									want:       "\"m|\"",
								},
								&labeledExpr{
									pos:   position{line: 244, col: 12, offset: 6733},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 244, col: 17, offset: 6738},
										name: "noPipe",
									},
								},
								&litMatcher{
									pos:        position{line: 244, col: 24, offset: 6745},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&labeledExpr{
									pos:   position{line: 244, col: 28, offset: 6749},
									label: "opts",
									expr: &zeroOrOneExpr{
										pos: position{line: 244, col: 33, offset: 6754},
										expr: &ruleRefExpr{
											pos:  position{line: 244, col: 33, offset: 6754},
											name: "matchOptions",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 250, col: 7, offset: 6939},
						run: (*parser).callonMatchPattern20,
						expr: &seqExpr{
							pos: position{line: 250, col: 7, offset: 6939},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 250, col: 7, offset: 6939},
									val:        "m=",
									ignoreCase: false,
									want:       "\"m=\"",
								},
								&labeledExpr{
									pos:   position{line: 250, col: 12, offset: 6944},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 250, col: 17, offset: 6949},
										name: "noEquals",
									},
								},
								&litMatcher{
									pos:        position{line: 250, col: 26, offset: 6958},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 250, col: 30, offset: 6962},
									label: "opts",
									expr: &zeroOrOneExpr{
										pos: position{line: 250, col: 35, offset: 6967},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 35, offset: 6967},
											name: "matchOptions",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 256, col: 7, offset: 7152},
						run: (*parser).callonMatchPattern29,
						expr: &seqExpr{
							pos: position{line: 256, col: 7, offset: 7152},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 256, col: 7, offset: 7152},
									val:        "m%",
									ignoreCase: false,
									want:       "\"m%\"",
								},
								&labeledExpr{
									pos:   position{line: 256, col: 12, offset: 7157},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 256, col: 17, offset: 7162},
										name: "noPercent",
									},
								},
								&litMatcher{
									pos:        position{line: 256, col: 27, offset: 7172},
									val:        "%",
									ignoreCase: false,
									want:       "\"%\"",
								},
								&labeledExpr{
									pos:   position{line: 256, col: 31, offset: 7176},
									label: "opts",
									expr: &zeroOrOneExpr{
										pos: position{line: 256, col: 36, offset: 7181},
										expr: &ruleRefExpr{
											pos:  position{line: 256, col: 36, offset: 7181},
											name: "matchOptions",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 7, offset: 7366},
						run: (*parser).callonMatchPattern38,
						expr: &seqExpr{
							pos: position{line: 262, col: 7, offset: 7366},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 262, col: 7, offset: 7366},
									val:        "m@",
									ignoreCase: false,
									want:       "\"m@\"",
								},
								&labeledExpr{
									pos:   position{line: 262, col: 12, offset: 7371},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 17, offset: 7376},
										name: "noAt",
									},
								},
								&litMatcher{
									pos:        position{line: 262, col: 22, offset: 7381},
									val:        "@",
									ignoreCase: false,
									want:       "\"@\"",
								},
								&labeledExpr{
									pos:   position{line: 262, col: 26, offset: 7385},
									label: "opts",
									expr: &zeroOrOneExpr{
										pos: position{line: 262, col: 31, offset: 7390},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 31, offset: 7390},
											name: "matchOptions",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Slug",
			pos:  position{line: 269, col: 1, offset: 7570},
			expr: &actionExpr{
				pos: position{line: 269, col: 9, offset: 7578},
				run: (*parser).callonSlug1,
				expr: &oneOrMoreExpr{
					pos: position{line: 269, col: 9, offset: 7578},
					expr: &charClassMatcher{
						pos:        position{line: 269, col: 9, offset: 7578},
						val:        "[a-zA-Z0-9/_\\\\.\\\\-]",
						chars:      []rune{'/', '_', '\\', '.', '\\', '-'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "matchOptions",
			pos:  position{line: 271, col: 1, offset: 7631},
			expr: &actionExpr{
				pos: position{line: 271, col: 17, offset: 7647},
				run: (*parser).callonmatchOptions1,
				expr: &oneOrMoreExpr{
					pos: position{line: 271, col: 17, offset: 7647},
					expr: &charClassMatcher{
						pos:        position{line: 271, col: 17, offset: 7647},
						val:        "[is]",
						chars:      []rune{'i', 's'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "noSlash",
			pos:  position{line: 273, col: 1, offset: 7685},
			expr: &actionExpr{
				pos: position{line: 273, col: 12, offset: 7696},
				run: (*parser).callonnoSlash1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 273, col: 12, offset: 7696},
					expr: &charClassMatcher{
						pos:        position{line: 273, col: 12, offset: 7696},
						val:        "[^/]",
						chars:      []rune{'/'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "noPipe",
			pos:  position{line: 274, col: 1, offset: 7733},
			expr: &actionExpr{
				pos: position{line: 274, col: 11, offset: 7743},
				run: (*parser).callonnoPipe1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 274, col: 11, offset: 7743},
					expr: &charClassMatcher{
						pos:        position{line: 274, col: 11, offset: 7743},
						val:        "[^|]",
						chars:      []rune{'|'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "noEquals",
			pos:  position{line: 275, col: 1, offset: 7780},
			expr: &actionExpr{
				pos: position{line: 275, col: 13, offset: 7792},
				run: (*parser).callonnoEquals1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 275, col: 13, offset: 7792},
					expr: &charClassMatcher{
						pos:        position{line: 275, col: 13, offset: 7792},
						val:        "[^=]",
						chars:      []rune{'='},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "noPercent",
			pos:  position{line: 276, col: 1, offset: 7829},
			expr: &actionExpr{
				pos: position{line: 276, col: 14, offset: 7842},
				run: (*parser).callonnoPercent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 276, col: 14, offset: 7842},
					expr: &charClassMatcher{
						pos:        position{line: 276, col: 14, offset: 7842},
						val:        "[^%]",
						chars:      []rune{'%'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "noAt",
			pos:  position{line: 277, col: 1, offset: 7879},
			expr: &actionExpr{
				pos: position{line: 277, col: 9, offset: 7887},
				run: (*parser).callonnoAt1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 277, col: 9, offset: 7887},
					expr: &charClassMatcher{
						pos:        position{line: 277, col: 9, offset: 7887},
						val:        "[^@]",
						chars:      []rune{'@'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "number",
			pos:  position{line: 279, col: 1, offset: 7925},
			expr: &actionExpr{
				pos: position{line: 279, col: 11, offset: 7935},
				run: (*parser).callonnumber1,
				expr: &oneOrMoreExpr{
					pos: position{line: 279, col: 11, offset: 7935},
					expr: &charClassMatcher{
						pos:        position{line: 279, col: 11, offset: 7935},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 280, col: 1, offset: 7982},
			expr: &zeroOrMoreExpr{
				pos: position{line: 280, col: 6, offset: 7987},
				expr: &charClassMatcher{
					pos:        position{line: 280, col: 6, offset: 7987},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "newline",
			pos:  position{line: 281, col: 1, offset: 7994},
			expr: &charClassMatcher{
				pos:        position{line: 281, col: 12, offset: 8005},
				val:        "[\\n\\r]",
				chars:      []rune{'\n', '\r'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EOF",
			pos:  position{line: 282, col: 1, offset: 8012},
			expr: &notExpr{
				pos: position{line: 282, col: 8, offset: 8019},
				expr: &anyMatcher{
					line: 282, col: 9, offset: 8020,
				},
			},
		},
	},
}

func (c *current) onLines1(line any) (any, error) {
	return line, nil
}

func (p *parser) callonLines1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLines1(stack["line"])
}

func (c *current) onLine1(stmt any) (any, error) {
	return stmt, nil
}

func (p *parser) callonLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLine1(stack["stmt"])
}

func (c *current) onComment1(comment any) (any, error) {
	return &Comment{string(c.text)}, nil
}

func (p *parser) callonComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment1(stack["comment"])
}

func (c *current) onExcludeDirective1(prl any) (any, error) {
	return &ExcludeDirective{prl.([]*PortRange)}, nil
}

func (p *parser) callonExcludeDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExcludeDirective1(stack["prl"])
}

func (c *current) onPortRangeList1(start, others any) (any, error) {
	if others == nil {
		return []*PortRange{start.(*PortRange)}, nil
	}

	var portRanges []*PortRange
	portRanges = append(portRanges, start.(*PortRange))
	for _, o := range others.([]interface{}) {
		otherRange := o.([]interface{})[1]
		portRanges = append(portRanges, otherRange.(*PortRange))
	}

	return portRanges, nil
}

func (p *parser) callonPortRangeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPortRangeList1(stack["start"], stack["others"])
}

func (c *current) onPortRange1(start, end any) (any, error) {
	if end == nil {
		return &PortRange{start.(int), start.(int)}, nil
	}

	endPort := end.([]interface{})[1]
	return &PortRange{start.(int), endPort.(int)}, nil
}

func (p *parser) callonPortRange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPortRange1(stack["start"], stack["end"])
}

func (c *current) onProbeDirective1(protocol, name, payload, noPayload any) (any, error) {
	return &ProbeDirective{protocol.(string), name.(string), payload.(string), noPayload != nil}, nil
}

func (p *parser) callonProbeDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProbeDirective1(stack["protocol"], stack["name"], stack["payload"], stack["noPayload"])
}

func (c *current) onProtocol1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonProtocol1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProtocol1()
}

func (c *current) onMatchDirective1(name, match, vi any) (any, error) {
	if vi == nil {
		return &MatchDirective{name.(Service), match.(MatchPattern), nil}, nil
	}
	return &MatchDirective{name.(Service), match.(MatchPattern), vi.([]VersionInfo)}, nil
}

func (p *parser) callonMatchDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchDirective1(stack["name"], stack["match"], stack["vi"])
}

func (c *current) onVersionInfo1(first, others any) (any, error) {
	if others == nil {
		return []VersionInfo{first.(VersionInfo)}, nil
	}

	var versionInfo []VersionInfo
	versionInfo = append(versionInfo, first.(VersionInfo))
	for _, o := range others.([]interface{}) {
		otherVersionInfo := o.([]interface{})[1]
		versionInfo = append(versionInfo, otherVersionInfo.(VersionInfo))
	}

	return versionInfo, nil
}

func (p *parser) callonVersionInfo1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVersionInfo1(stack["first"], stack["others"])
}

func (c *current) onSoftMatchDirective1(name, match, vi any) (any, error) {
	if vi == nil {
		return &SoftMatchDirective{name.(Service), match.(MatchPattern), nil}, nil
	}
	return &SoftMatchDirective{name.(Service), match.(MatchPattern), vi.([]VersionInfo)}, nil
}

func (p *parser) callonSoftMatchDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSoftMatchDirective1(stack["name"], stack["match"], stack["vi"])
}

func (c *current) onPortsDirective1(prl any) (any, error) {
	return &PortsDirective{prl.([]*PortRange), false}, nil
}

func (p *parser) callonPortsDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPortsDirective1(stack["prl"])
}

func (c *current) onSSLPortsDirective1(prl any) (any, error) {
	return &PortsDirective{prl.([]*PortRange), true}, nil
}

func (p *parser) callonSSLPortsDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSSLPortsDirective1(stack["prl"])
}

func (c *current) onTotalWaitMsDirective1(ms any) (any, error) {
	value := ms.(int)
	if value < 0 {
		return nil, fmt.Errorf("totalwaitms must be a positive integer")
	}
	return &TotalWaitMsDirective{value}, nil
}

func (p *parser) callonTotalWaitMsDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTotalWaitMsDirective1(stack["ms"])
}

func (c *current) onTcpWrappedMsDirective1(ms any) (any, error) {
	value := ms.(int)
	if value < 0 {
		return nil, fmt.Errorf("tcpwrappedms must be a positive integer")
	}
	return &TcpWrappedMsDirective{value}, nil
}

func (p *parser) callonTcpWrappedMsDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcpWrappedMsDirective1(stack["ms"])
}

func (c *current) onRarityDirective1(number any) (any, error) {
	value := number.(int)

	if value < 1 || value > 9 {
		return nil, fmt.Errorf("rarity must be between 1 and 9")
	}

	return &RarityDirective{value}, nil
}

func (p *parser) callonRarityDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRarityDirective1(stack["number"])
}

func (c *current) onFallbackDirective1(services any) (any, error) {
	return &FallbackDirective{services.([]string)}, nil
}

func (p *parser) callonFallbackDirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFallbackDirective1(stack["services"])
}

func (c *current) onMatchOptions1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonMatchOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchOptions1()
}

func (c *current) onService1(prefixed, name any) (any, error) {
	return Service{name.(string), prefixed != nil}, nil
}

func (p *parser) callonService1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onService1(stack["prefixed"], stack["name"])
}

func (c *current) onServiceList1(name, others any) (any, error) {
	if others == nil {
		return []string{name.(string)}, nil
	}

	var services []string
	services = append(services, name.(string))
	for _, o := range others.([]interface{}) {
		otherService := o.([]interface{})[1]
		services = append(services, otherService.(string))
	}

	return services, nil
}

func (p *parser) callonServiceList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onServiceList1(stack["name"], stack["others"])
}

func (c *current) onProbeString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonProbeString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProbeString1()
}

func (c *current) onVersionInfoItem2(t, value any) (any, error) {
	return VersionInfo{"", value.(string)}, nil
}

func (p *parser) callonVersionInfoItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVersionInfoItem2(stack["t"], stack["value"])
}

func (c *current) onVersionInfoItem10(t, value any) (any, error) {
	return VersionInfo{"", value.(string)}, nil
}

func (p *parser) callonVersionInfoItem10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVersionInfoItem10(stack["t"], stack["value"])
}

func (c *current) onVersionInfoItem18(value any) (any, error) {
	return VersionInfo{"cpe", value.(string)}, nil
}

func (p *parser) callonVersionInfoItem18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVersionInfoItem18(stack["value"])
}

func (c *current) onVersionInfoItem26(value any) (any, error) {
	return VersionInfo{"cpe", value.(string)}, nil
}

func (p *parser) callonVersionInfoItem26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVersionInfoItem26(stack["value"])
}

func (c *current) onMatchPattern2(expr, opts any) (any, error) {

	if opts == nil {
		return MatchPattern{expr.(string), ""}, nil
	}
	return MatchPattern{expr.(string), opts.(string)}, nil

}

func (p *parser) callonMatchPattern2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchPattern2(stack["expr"], stack["opts"])
}

func (c *current) onMatchPattern11(expr, opts any) (any, error) {

	if opts == nil {
		return MatchPattern{expr.(string), ""}, nil
	}
	return MatchPattern{expr.(string), opts.(string)}, nil

}

func (p *parser) callonMatchPattern11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchPattern11(stack["expr"], stack["opts"])
}

func (c *current) onMatchPattern20(expr, opts any) (any, error) {

	if opts == nil {
		return MatchPattern{expr.(string), ""}, nil
	}
	return MatchPattern{expr.(string), opts.(string)}, nil

}

func (p *parser) callonMatchPattern20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchPattern20(stack["expr"], stack["opts"])
}

func (c *current) onMatchPattern29(expr, opts any) (any, error) {

	if opts == nil {
		return MatchPattern{expr.(string), ""}, nil
	}
	return MatchPattern{expr.(string), opts.(string)}, nil

}

func (p *parser) callonMatchPattern29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchPattern29(stack["expr"], stack["opts"])
}

func (c *current) onMatchPattern38(expr, opts any) (any, error) {

	if opts == nil {
		return MatchPattern{expr.(string), ""}, nil
	}
	return MatchPattern{expr.(string), opts.(string)}, nil

}

func (p *parser) callonMatchPattern38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchPattern38(stack["expr"], stack["opts"])
}

func (c *current) onSlug1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSlug1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSlug1()
}

func (c *current) onmatchOptions1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonmatchOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmatchOptions1()
}

func (c *current) onnoSlash1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonnoSlash1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnoSlash1()
}

func (c *current) onnoPipe1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonnoPipe1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnoPipe1()
}

func (c *current) onnoEquals1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonnoEquals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnoEquals1()
}

func (c *current) onnoPercent1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonnoPercent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnoPercent1()
}

func (c *current) onnoAt1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonnoAt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnoAt1()
}

func (c *current) onnumber1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonnumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnumber1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
